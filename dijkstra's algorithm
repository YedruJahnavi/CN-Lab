#include <stdio.h>
#define MAX 100
#define INFINITY 9999

void dijkstra(int n, int graph[MAX][MAX], int start) {
    int distance[MAX], visited[MAX], i, j, count, min_dist, next_node;

    // Initialization
    for (i = 0; i < n; i++) {
        distance[i] = graph[start][i];
        visited[i] = 0;
    }
    distance[start] = 0;
    visited[start] = 1;
    count = 1;

    while (count < n) {
        min_dist = INFINITY;
        next_node = -1;
        for (i = 0; i < n; i++) {
            if (!visited[i] && distance[i] < min_dist) {
                min_dist = distance[i];
                next_node = i;
            }
        }
        if (next_node == -1) break;

        visited[next_node] = 1;
        for (i = 0; i < n; i++) {
            if (!visited[i] && graph[next_node][i] != INFINITY && 
                distance[next_node] + graph[next_node][i] < distance[i]) {
                distance[i] = distance[next_node] + graph[next_node][i];
            }
        }
        count++;
    }
    // Output shortest distances
    printf("\nShortest distances from source vertex %d:\n", start);
    for (i = 0; i < n; i++) {
        printf("To vertex %d : %d\n", i, distance[i]);
    }
}
int main() {
    int n, graph[MAX][MAX], i, j, start;
    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter the adjacency matrix (use %d for infinity/no edge):\n", INFINITY);
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &graph[i][j]);
    
    printf("Enter the source vertex (0 to %d): ", n - 1);
    scanf("%d", &start);

    dijkstra(n, graph, start);
    return 0;
} 


OUTPUT:


Enter number of vertices: 4
Enter the adjacency matrix (use 9999 for infinity/no edge):
0 3 9999 7
8 0 2 9999
5 9999 0 1
2 9999 9999 0
Enter the source vertex (0 to 3): 0
Shortest distances from source vertex 0:
To vertex 0 : 0
To vertex 1 : 3
To vertex 2 : 5
To vertex 3 : 6
Note: Replace 9999 with actual large value for "no edge" or infinity.
